name: Angular CI with SonarCloud and Docker Deploy

on:
  push:
    branches:
      - prodFront
  pull_request:
    types: [opened, synchronize, reopened]

jobs:

  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies
        run: npm install --legacy-peer-deps


  build_project:
    needs: install_dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install npm dependencies
        run: npm install --legacy-peer-deps

      - name: Build Angular project (production)
        run: npx ng build --configuration=production


  run_tests:
    needs: build_project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install npm dependencies
        run: npm install --legacy-peer-deps

      - name: Run unit tests with coverage (ignore failures)
        run: npm run test -- --watch=false --code-coverage || echo "Tests failed but continuing..."


  sonarcloud_scan:
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install npm dependencies
        run: npm install --legacy-peer-deps

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  docker_build_and_push:
    needs: sonarcloud_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Define Docker image tag
        run: echo IMAGE_TAG=${GITHUB_SHA} >> $GITHUB_ENV

      # Nexus Docker Registry login and push
      - name: Login to Nexus Docker Registry
        run: echo "${{ secrets.NEXUS_PASSWORD }}" | docker login https://454a-165-51-179-72.ngrok-free.app -u ${{ secrets.NEXUS_USERNAME }} --password-stdin

      - name: Build Docker image with tags
        run: |
          docker build \
            -t 454a-165-51-179-72.ngrok-free.app/devopsfront:${IMAGE_TAG} \
            -t 454a-165-51-179-72.ngrok-free.app/devopsfront:latest \
            .

      - name: Push Docker images to Nexus
        run: |
          docker push 454a-165-51-179-72.ngrok-free.app/devopsfront:${IMAGE_TAG}
          docker push 454a-165-51-179-72.ngrok-free.app/devopsfront:latest

      # Docker Hub login and push
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Tag image for Docker Hub
        run: |
          docker tag 454a-165-51-179-72.ngrok-free.app/devopsfront:${IMAGE_TAG} ${{ secrets.DOCKER_USERNAME }}/devopsfront:${IMAGE_TAG}
          docker tag 454a-165-51-179-72.ngrok-free.app/devopsfront:latest ${{ secrets.DOCKER_USERNAME }}/devopsfront:latest

      - name: Push images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/devopsfront:${IMAGE_TAG}
          docker push ${{ secrets.DOCKER_USERNAME }}/devopsfront:latest
